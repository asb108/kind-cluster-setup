---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: airflow-postgres
  labels:
    app: airflow
    component: postgres
spec:
  serviceName: airflow-postgres
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: postgres
  template:
    metadata:
      labels:
        app: airflow
        component: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:{{ postgres_version }}
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: airflow
        - name: POSTGRES_PASSWORD
          value: {{ postgres_password }}
        - name: POSTGRES_DB
          value: airflow
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-redis
  labels:
    app: airflow
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: redis
  template:
    metadata:
      labels:
        app: airflow
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
---
# Airflow Webserver Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  labels:
    app: airflow
    component: webserver
spec:
  replicas: {{ replicas }}
  selector:
    matchLabels:
      app: airflow
      component: webserver
  template:
    metadata:
      labels:
        app: airflow
        component: webserver
    spec:
      serviceAccountName: airflow
      containers:
      - name: webserver
        image: apache/airflow:{{ version }}
        ports:
        - containerPort: 8080
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          value: postgresql://airflow:{{ postgres_password }}@airflow-postgres:5432/airflow
        - name: AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE
          value: "{{ kubernetes_namespace }}"
        - name: AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY
          value: apache/airflow
        - name: AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG
          value: "{{ version }}"
        - name: AIRFLOW__KUBERNETES_EXECUTOR__DELETE_WORKER_PODS
          value: "true"
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          value: admin
        - name: AIRFLOW__CORE__LOAD_EXAMPLES
          value: "{{ enable_dag_examples }}"
        # Authentication configuration for Airflow 2.8
        - name: AIRFLOW__WEBSERVER__AUTHENTICATE
          value: "true"
        - name: AIRFLOW__WEBSERVER__AUTH_BACKEND
          value: airflow.contrib.auth.backends.password_auth
        command:
        - bash
        - -c
        - |
          echo "üöÄ Starting Airflow 2.8 Webserver Setup..."

          # Initialize the database
          echo "üìä Initializing database..."
          airflow db init

          # Create admin user
          echo "üë§ Creating admin user..."
          airflow users create \
            --username admin \
            --password admin \
            --firstname Admin \
            --lastname User \
            --role Admin \
            --email admin@example.com

          echo "‚úÖ Setup complete! Starting webserver..."
          echo "üìù Login credentials: admin/admin"

          # Start the webserver
          airflow webserver --port 8080
        resources:
          requests:
            memory: "{{ memory_request }}"
            cpu: "{{ cpu_request }}"
          limits:
            memory: "{{ memory_limit }}"
            cpu: "{{ cpu_limit }}"
        volumeMounts:
        - name: dags-volume
          mountPath: /opt/airflow/dags
      volumes:
      - name: dags-volume
        configMap:
          name: airflow-dags
---
# Airflow Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  labels:
    app: airflow
    component: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: scheduler
  template:
    metadata:
      labels:
        app: airflow
        component: scheduler
    spec:
      serviceAccountName: airflow
      containers:
      - name: scheduler
        image: apache/airflow:{{ version }}
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          value: postgresql://airflow:{{ postgres_password }}@airflow-postgres:5432/airflow
        - name: AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE
          value: "{{ kubernetes_namespace }}"
        - name: AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY
          value: apache/airflow
        - name: AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG
          value: "{{ version }}"
        - name: AIRFLOW__KUBERNETES_EXECUTOR__DELETE_WORKER_PODS
          value: "true"
        - name: AIRFLOW__CORE__LOAD_EXAMPLES
          value: "{{ enable_dag_examples }}"
        command:
        - airflow
        - scheduler
        resources:
          requests:
            memory: "{{ memory_request }}"
            cpu: "{{ cpu_request }}"
          limits:
            memory: "{{ memory_limit }}"
            cpu: "{{ cpu_limit }}"
        volumeMounts:
        - name: dags-volume
          mountPath: /opt/airflow/dags
      volumes:
      - name: dags-volume
        configMap:
          name: airflow-dags
# Note: Worker deployment removed - KubernetesExecutor creates workers dynamically
